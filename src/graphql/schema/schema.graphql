### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Book {
  author: User
  chapters(skip: Int): [Chapter!]!
  coAuthors(skip: Int): [User!]!
  createdAt: DateTime!
  id: String!
  published: Boolean!
  tags(skip: Int): [Tag!]!
  title: String!
  updatedAt: DateTime!
}

input BookCreateInput {
  author: UserCreateOneWithoutBooksInput
  chapters: ChapterCreateManyWithoutBookInput
  coAuthors: UserCreateManyWithoutBookInput
  createdAt: DateTime
  id: String
  published: Boolean
  tags: TagCreateManyWithoutBooksInput
  title: String!
  updatedAt: DateTime
}

input BookCreateManyWithoutAuthorInput {
  connect: [BookWhereUniqueInput!]
  create: [BookCreateWithoutAuthorInput!]
}

input BookCreateManyWithoutTagsInput {
  connect: [BookWhereUniqueInput!]
  create: [BookCreateWithoutTagsInput!]
}

input BookCreateOneWithoutChaptersInput {
  connect: BookWhereUniqueInput
  create: BookCreateWithoutChaptersInput
}

input BookCreateOneWithoutCoAuthorsInput {
  connect: BookWhereUniqueInput
  create: BookCreateWithoutCoAuthorsInput
}

input BookCreateWithoutAuthorInput {
  chapters: ChapterCreateManyWithoutBookInput
  coAuthors: UserCreateManyWithoutBookInput
  createdAt: DateTime
  id: String
  published: Boolean
  tags: TagCreateManyWithoutBooksInput
  title: String!
  updatedAt: DateTime
}

input BookCreateWithoutChaptersInput {
  author: UserCreateOneWithoutBooksInput
  coAuthors: UserCreateManyWithoutBookInput
  createdAt: DateTime
  id: String
  published: Boolean
  tags: TagCreateManyWithoutBooksInput
  title: String!
  updatedAt: DateTime
}

input BookCreateWithoutCoAuthorsInput {
  author: UserCreateOneWithoutBooksInput
  chapters: ChapterCreateManyWithoutBookInput
  createdAt: DateTime
  id: String
  published: Boolean
  tags: TagCreateManyWithoutBooksInput
  title: String!
  updatedAt: DateTime
}

input BookCreateWithoutTagsInput {
  author: UserCreateOneWithoutBooksInput
  chapters: ChapterCreateManyWithoutBookInput
  coAuthors: UserCreateManyWithoutBookInput
  createdAt: DateTime
  id: String
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input BookWhereUniqueInput {
  id: String
}

type Chapter {
  author: User
  book: Book
  chapterLinksFrom(skip: Int): [ChapterLink!]!
  chapterLinksTo(skip: Int): [ChapterLink!]!
  coAuthors(skip: Int): [User!]!
  createdAt: DateTime!
  id: String!
  published: Boolean!
  tags(skip: Int): [Tag!]!
  title: String!
  updatedAt: DateTime!
}

input ChapterCreateManyWithoutAuthorInput {
  connect: [ChapterWhereUniqueInput!]
  create: [ChapterCreateWithoutAuthorInput!]
}

input ChapterCreateManyWithoutBookInput {
  connect: [ChapterWhereUniqueInput!]
  create: [ChapterCreateWithoutBookInput!]
}

input ChapterCreateManyWithoutCoAuthorsInput {
  connect: [ChapterWhereUniqueInput!]
  create: [ChapterCreateWithoutCoAuthorsInput!]
}

input ChapterCreateManyWithoutTagsInput {
  connect: [ChapterWhereUniqueInput!]
  create: [ChapterCreateWithoutTagsInput!]
}

input ChapterCreateOneWithoutChapterLinksFromInput {
  connect: ChapterWhereUniqueInput
  create: ChapterCreateWithoutChapterLinksFromInput
}

input ChapterCreateOneWithoutChapterLinksToInput {
  connect: ChapterWhereUniqueInput
  create: ChapterCreateWithoutChapterLinksToInput
}

input ChapterCreateWithoutAuthorInput {
  book: BookCreateOneWithoutChaptersInput
  chapterLinksFrom: ChapterLinkCreateManyWithoutFromChapterInput
  chapterLinksTo: ChapterLinkCreateManyWithoutToChapterInput
  coAuthors: UserCreateManyWithoutChaptersInput
  content: Json!
  createdAt: DateTime
  id: String
  published: Boolean
  tags: TagCreateManyWithoutChaptersInput
  title: String!
  updatedAt: DateTime
}

input ChapterCreateWithoutBookInput {
  author: UserCreateOneWithoutChapterInput
  chapterLinksFrom: ChapterLinkCreateManyWithoutFromChapterInput
  chapterLinksTo: ChapterLinkCreateManyWithoutToChapterInput
  coAuthors: UserCreateManyWithoutChaptersInput
  content: Json!
  createdAt: DateTime
  id: String
  published: Boolean
  tags: TagCreateManyWithoutChaptersInput
  title: String!
  updatedAt: DateTime
}

input ChapterCreateWithoutChapterLinksFromInput {
  author: UserCreateOneWithoutChapterInput
  book: BookCreateOneWithoutChaptersInput
  chapterLinksTo: ChapterLinkCreateManyWithoutToChapterInput
  coAuthors: UserCreateManyWithoutChaptersInput
  content: Json!
  createdAt: DateTime
  id: String
  published: Boolean
  tags: TagCreateManyWithoutChaptersInput
  title: String!
  updatedAt: DateTime
}

input ChapterCreateWithoutChapterLinksToInput {
  author: UserCreateOneWithoutChapterInput
  book: BookCreateOneWithoutChaptersInput
  chapterLinksFrom: ChapterLinkCreateManyWithoutFromChapterInput
  coAuthors: UserCreateManyWithoutChaptersInput
  content: Json!
  createdAt: DateTime
  id: String
  published: Boolean
  tags: TagCreateManyWithoutChaptersInput
  title: String!
  updatedAt: DateTime
}

input ChapterCreateWithoutCoAuthorsInput {
  author: UserCreateOneWithoutChapterInput
  book: BookCreateOneWithoutChaptersInput
  chapterLinksFrom: ChapterLinkCreateManyWithoutFromChapterInput
  chapterLinksTo: ChapterLinkCreateManyWithoutToChapterInput
  content: Json!
  createdAt: DateTime
  id: String
  published: Boolean
  tags: TagCreateManyWithoutChaptersInput
  title: String!
  updatedAt: DateTime
}

input ChapterCreateWithoutTagsInput {
  author: UserCreateOneWithoutChapterInput
  book: BookCreateOneWithoutChaptersInput
  chapterLinksFrom: ChapterLinkCreateManyWithoutFromChapterInput
  chapterLinksTo: ChapterLinkCreateManyWithoutToChapterInput
  coAuthors: UserCreateManyWithoutChaptersInput
  content: Json!
  createdAt: DateTime
  id: String
  published: Boolean
  title: String!
  updatedAt: DateTime
}

type ChapterLink {
  createdAt: DateTime!
  fromChapter: Chapter
  id: String!
  title: String!
  toChapter: Chapter
  updatedAt: DateTime!
}

input ChapterLinkCreateManyWithoutFromChapterInput {
  connect: [ChapterLinkWhereUniqueInput!]
  create: [ChapterLinkCreateWithoutFromChapterInput!]
}

input ChapterLinkCreateManyWithoutToChapterInput {
  connect: [ChapterLinkWhereUniqueInput!]
  create: [ChapterLinkCreateWithoutToChapterInput!]
}

input ChapterLinkCreateWithoutFromChapterInput {
  createdAt: DateTime
  id: String
  title: String!
  toChapter: ChapterCreateOneWithoutChapterLinksToInput
  updatedAt: DateTime
}

input ChapterLinkCreateWithoutToChapterInput {
  createdAt: DateTime
  fromChapter: ChapterCreateOneWithoutChapterLinksFromInput
  id: String
  title: String!
  updatedAt: DateTime
}

input ChapterLinkWhereUniqueInput {
  id: String
}

input ChapterWhereUniqueInput {
  id: String
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

scalar DateTime

scalar Json

type Mutation {
  createOneBook(data: BookCreateInput!): Book!
  signIn(email: String!, password: String!): User!
  signOut: SignOut!
  signUp(email: String!, name: String, password: String!): User!
}

type Query {
  me: User
  user(where: UserWhereUniqueInput!): User
}

enum Role {
  ADMIN
  USER
}

type SignOut {
  success: Boolean!
}

type Tag {
  books(skip: Int): [Book!]!
  chapters(skip: Int): [Chapter!]!
  createdAt: DateTime!
  id: String!
  title: String!
}

input TagCreateManyWithoutBooksInput {
  connect: [TagWhereUniqueInput!]
  create: [TagCreateWithoutBooksInput!]
}

input TagCreateManyWithoutChaptersInput {
  connect: [TagWhereUniqueInput!]
  create: [TagCreateWithoutChaptersInput!]
}

input TagCreateWithoutBooksInput {
  chapters: ChapterCreateManyWithoutTagsInput
  createdAt: DateTime
  id: String
  title: String!
}

input TagCreateWithoutChaptersInput {
  books: BookCreateManyWithoutTagsInput
  createdAt: DateTime
  id: String
  title: String!
}

input TagWhereUniqueInput {
  id: String
  title: String
}

type User {
  books(skip: Int): [Book!]!
  chapters(skip: Int): [Chapter!]!
  createdAt: DateTime!
  email: String!
  emailHash: String!
  id: String!
  name: String
  role: Role!
  updatedAt: DateTime!
}

input UserCreateManyWithoutBookInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutBookInput!]
}

input UserCreateManyWithoutChaptersInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutChaptersInput!]
}

input UserCreateOneWithoutBooksInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutBooksInput
}

input UserCreateOneWithoutChapterInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutChapterInput
}

input UserCreateWithoutBookInput {
  books: BookCreateManyWithoutAuthorInput
  Chapter: ChapterCreateManyWithoutAuthorInput
  chapters: ChapterCreateManyWithoutCoAuthorsInput
  createdAt: DateTime
  email: String!
  emailHash: String!
  id: String
  name: String
  password: String
  passwordSalt: String
  role: Role
  updatedAt: DateTime
}

input UserCreateWithoutBooksInput {
  Book: BookCreateOneWithoutCoAuthorsInput
  Chapter: ChapterCreateManyWithoutAuthorInput
  chapters: ChapterCreateManyWithoutCoAuthorsInput
  createdAt: DateTime
  email: String!
  emailHash: String!
  id: String
  name: String
  password: String
  passwordSalt: String
  role: Role
  updatedAt: DateTime
}

input UserCreateWithoutChapterInput {
  Book: BookCreateOneWithoutCoAuthorsInput
  books: BookCreateManyWithoutAuthorInput
  chapters: ChapterCreateManyWithoutCoAuthorsInput
  createdAt: DateTime
  email: String!
  emailHash: String!
  id: String
  name: String
  password: String
  passwordSalt: String
  role: Role
  updatedAt: DateTime
}

input UserCreateWithoutChaptersInput {
  Book: BookCreateOneWithoutCoAuthorsInput
  books: BookCreateManyWithoutAuthorInput
  Chapter: ChapterCreateManyWithoutAuthorInput
  createdAt: DateTime
  email: String!
  emailHash: String!
  id: String
  name: String
  password: String
  passwordSalt: String
  role: Role
  updatedAt: DateTime
}

input UserWhereUniqueInput {
  email: String
  id: String
}
